{"version":3,"sources":["webpack:///./src/app/task-list/task-list.module.ts","webpack:///./src/app/task-list/task-list.page.html","webpack:///./src/app/task-list/task-list.page.scss","webpack:///./src/app/task-list/task-list.page.ts"],"names":[],"mappings":"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","file":"task-list-task-list-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TaskListPage } from './task-list.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TaskListPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [TaskListPage]\n})\nexport class TaskListPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>TaskList</ion-title>\\n    <ion-buttons slot=\\\"end\\\" (click)=\\\"addItem()\\\">\\n      <ion-button>\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"add\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <ion-list>\\n    <!-- <ion-item *ngFor=\\\"let task of tasks\\\">{{ task.title }}</ion-item> -->\\n    <ion-item-sliding *ngFor=\\\"let task of tasks | async\\\" #slidingItem>\\n      <ion-item [ngClass]=\\\"{ taskDone: task.status == 'done'}\\\">{{ task.title }}</ion-item>\\n      <ion-item-options side=\\\"end\\\" (ionSwipe)=\\\"removeTask(slidingItem,task)\\\">\\n        <ion-item-option (click)=\\\"markAsDone(slidingItem, task)\\\" color=\\\"primary\\\">\\n          <ion-icon slot=\\\"icon-only\\\" name=\\\"checkmark\\\"></ion-icon>\\n        </ion-item-option>\\n        <ion-item-option (click)=\\\"removeTask(slidingItem, task)\\\" color=\\\"danger\\\" expandable>\\n          <ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>\\n        </ion-item-option>\\n      </ion-item-options>\\n    </ion-item-sliding>\\n  </ion-list>\\n</ion-content>\\n\"","module.exports = \".taskDone {\\n  text-decoration: line-through; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9jYXNleS9Eb2N1bWVudHMvQXBwRGV2ZWxvcG1lbnQvY2l0cHQyMjdfaW9uaWM0L0lvbmljNF90b2RvL2NpdHB0MjI3X3RvZG9hcHAvc3JjL2FwcC90YXNrLWxpc3QvdGFzay1saXN0LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDZCQUE2QixFQUFBIiwiZmlsZSI6InNyYy9hcHAvdGFzay1saXN0L3Rhc2stbGlzdC5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGFza0RvbmUge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { AlertController, IonItemSliding } from '@ionic/angular';\nimport { Task } from './task';\n\n// Angularfire and Firebase\nimport { AngularFireDatabase, AngularFireList } from 'angularfire2/database';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.page.html',\n  styleUrls: ['./task-list.page.scss'],\n})\nexport class TaskListPage implements OnInit {\n\n  //tasks: Array<Task> = []; // original code\n  taskList: AngularFireList<Task>;\n  tasks: Observable<any[]>;\n\n  constructor(\n    public alertController: AlertController,\n    public af: AngularFireDatabase\n  ) {\n    this.taskList = this.af.list('/tasks');\n    this.tasks = this.taskList.valueChanges();\n    // this.tasks = [\n    //   { title: \"Buy groceries\", status: 'open' },\n    //   { title: \"Wash car\", status: \"open\" },\n    //   { title: \"Pick up prescriptions\", status: \"open\"}\n    // ]\n  }\n\n  // original from textbook\n  // addItem() : void {\n  //   let newTask: string = prompt(\"New Task\");\n  //   if( newTask !== '' ){\n  //     this.tasks.push({ title: newTask, status: 'open'});\n  //   }\n  // }\n\n  async addItem() {\n    let alert = await this.alertController.create({\n      message: \"Enter a new task\",\n      inputs: [{\n        name: 'newTask',\n        type: 'text'\n      }],\n      buttons: [{\n        text: \"Cancel\",\n        role: 'cancel'\n      },{\n        text: 'Add',\n        handler: (data) => {\n          console.log(data);\n          if( data.newTask != ''){\n            // this.tasks.push({ // original code\n            //   title: data.newTask, status: 'open'\n            // });\n\n            const newTaskReference = this.taskList.push({\n              id: '',\n              title: data.newTask,\n              status: 'open'\n            });\n            newTaskReference.update({id: newTaskReference.key });\n\n          }// end if\n        }// end handler\n      }]// end buttons\n    });// end create\n    await alert.present();\n  }\n\n  markAsDone( slidingItem: IonItemSliding, theTask ): void {\n    // theTask.status = \"done\";\n    // slidingItem.close();\n    if( theTask.status != \"done\" ){\n      theTask.status = \"done\";\n    } else {\n      theTask.status = \"open\";\n    }\n    this.taskList.update(theTask.id, theTask );\n    slidingItem.close();\n  }\n\n  removeTask (slidingItem: IonItemSliding, theTask ): void {\n    // theTask.status = \"removed\";\n    // let index = this.tasks.indexOf(theTask);\n    // if( index > -1 ){\n    //   this.tasks.splice(index,1);\n    // }\n    this.taskList.remove(theTask.id);\n    slidingItem.close();\n  }\n\n  ngOnInit() {\n  }\n\n}\n"],"sourceRoot":""}